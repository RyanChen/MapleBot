const Discord = require('discord.js');
const {prefix} = require('./configs/config.json');
const calendar = require('./modules/calendar.js');
const schedule = require('node-schedule');
const google_auth = require('./modules/google_auth.js');
const EmbedMessages = require('./configs/message.js');
const roleClaim = require('./modules/role-claim.js')
const serial = require('./modules/serial_number.js');
const tcpp = require('tcp-ping');

const token = process.env.TOKEN
const channel_id = process.env.CHANNEL_ID
const role_id = process.env.ROLE_ID
const chat_channel_id = process.env.CHAT_CHANNEL_ID
const manager_role_id = process.env.MANAGER_ROLE_ID
const styler_role_id = process.env.STYLER_ROLE_ID
const bot_id = process.env.BOT_ID
const server_channel_data = JSON.parse(process.env.SERVER_CHANNEL_DATA)

const client = new Discord.Client();

client.login(token).then(loggin => {
    console.log("Logging Successfully.");
}).catch(e => {
    console.error(e);
});

var channel;

// 連上線時的事件
client.on('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);

    roleClaim(client);
    channel = client.channels.cache.get(channel_id)
    // var msg = "MapleBot is online!";
    // send_msg_to_channel(msg);

    CleanMessageJob();

    google_auth.authorize('token').then((res) => {
        if (res) {
            ScanCalendar(5);
            alarm_status = true;
        }
    })

    // create serial table
    sql = 'CREATE TABLE IF NOT EXISTS serial (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name text, serial_number text, due_date timestamp, available boolean, share_time timestamp, share_by text, recipient text, send_time timestamp);'
    serial.create_table(sql).then((res) => {
        if (res) {
            console.log("Table serial table is ready.")
        }
        else {
            console.log("Table serial is table NOT ready.")
        }
    })

    sql = 'CREATE TABLE IF NOT EXISTS used_serial (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, serial_id integer, name text, serial_number text, due_date timestamp, available boolean, share_time timestamp, share_by text, recipient text, send_time timestamp);'
    serial.create_table(sql).then((res) => {
        if (res) {
            console.log("Table used_serial table is ready.")
        }
        else {
            console.log("Table used_serial is table NOT ready.")
        }
    })

    // serial.drop_table('serial')
});

client.on('guildMemberAdd', () => {
    chat_channel = client.channels.cache.get(chat_channel_id)
    chat_channel.send("嗨，歡迎加入『伏時夢長』Discord頻道～請先看公告，然後到ID對照區留言喔～")
});

var job;
var alarm_status = false;
var to_everyone = false;
var to_here = false;
var to_notify_group_only = true

/***
┬ ┬ ┬ ┬ ┬ ┬
│ │ │ │ │ │
│ │ │ │ │ └ day of week (0 - 7) (0 or 7 is Sun)
│ │ │ │ └───── month (1 - 12)
│ │ │ └────────── day of month (1 - 31)
│ │ └─────────────── hour (0 - 23)
│ └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
***/

function ScanCalendar(freq=5) {
    // rule = SetRule(freq)
    // job = schedule.scheduleJob(rule, () => {
    //     GetEventMessage().then((res, err) => {
    //         if (res != "") {
    //             send_msg_to_channel(res, true);
    //         }
    //     }).catch(error => { return; });
    // })
    var rule_string = `0 */${freq} * * * *`;
    job = schedule.scheduleJob(rule_string, function(){
        GetEventMessage().then((res, err) => {
            if (res != "") {
                send_msg_to_channel(res, to_everyone, to_here, to_notify_group_only);
            }
        }).catch(error => { return; });
    });
}

function CleanMessageJob() {
    var rule_string = `0 0 0 * * *`;
    schedule.scheduleJob(rule_string, function(){
        clean_all_message_in_channel();
    });
}

function GetEventMessage(){
    var EventMessage = {
        "BOT": [],
        "全體": [],
        "管理": [],
        "外觀": []
    }
    var msg;
    return new Promise((resolve, reject) => {
        calendar.get_event().then((res) => {
            if (res.length) {
                msg = ""
                res.map((event, i) => {
                    msg = "『" + event.summary + "』" + " " + event.description

                    if (event.location != "")
                    {
                        EventMessage[event.location].push(msg)
                    }
                    else
                    {
                        EventMessage["BOT"].push(msg)
                    }
                });
            }

            resolve(EventMessage);
        })
    }).catch(error => { return EventMessage; });
}

function SetRule(freq) {
    // second、minute、hour、date、dayOfWeek、month
    let rule = new schedule.RecurrenceRule();
    if (freq == 'month') {
        to_run = Array.from(Array(12).keys(0), x => x + 1); // 1-12
        rule.month = to_run;
        rule.date = 1;
        rule.hour = 0;
        rule.minute = 0;
    }
    else if (freq == 'dayOfWeek') {
        to_run = Array.from(Array(8).keys(0)); // 0-7
        rule.dayOfWeek = to_run;
        rule.hour = 0;
        rule.minute = 0;
    }
    else if (freq == 'date') {
        to_run = Array.from(Array(31).keys(0), x => x + 1); // 1-31
        rule.date = to_run;
        rule.hour = 0;
        rule.minute = 0;
    }
    else if (freq == 'hour') {
        console.log("Rule = hour")
        to_run = Array.from(Array(24).keys(0)); // 0-23
        rule.hour = to_run;
        rule.minute = 0;
    }
    else if (freq == 'minute') {
        to_run = Array.from(Array(59).keys(0)); // 0-59
        rule.minute = to_run;
    }
    else if (freq == 'second') {
        to_run = Array.from(Array(59).keys(0));// 0-59
        rule.second = to_run;
    }
    else {
        console.log("Rule default is minute")
        to_run = Array.from(Array(59).keys(0));
        rule.minute = to_run;
    }

    return rule;
}

function send_msg_to_channel(msg, is_everyone=false, is_here=false, is_to_notify_group_only=false) {
    var m;
    for (const [key, value] of Object.entries(msg)) {
        m = ""

        if (value.length > 0)
        {
            value.forEach(data => {
                if (m != "")
                {
                    m += "\n";
                }
                m += data
            })

            if (key == 'BOT') // [BOT]
            {
                channel.send("<@&" + role_id + ">" + " " + m);
            }
            else if (key == '全體') // [全體]
            {
                channel.send("@everyone" + " " + m);
            }
            else if (key == '管理') // [管理]
            {
                channel.send("<@&" + manager_role_id + ">" + " " + m);
            }
            else if (key == '外觀') // [外觀]
            {
                channel.send("<@&" + styler_role_id + ">" + " " + m);
            }
        }
    }
}

// 當 Bot 接收到訊息時的事件
client.on('message', msg => {
    if (msg.author.id == bot_id) {
        return 0;
    }
    else {
        console.log("msg.author.id = " + msg.author.id)
    }

    // 私訊機器人使用序號功能
    if (msg.channel.type === 'dm') {
        if (msg.content.toLowerCase().startsWith(`${prefix}save_sn`)) {
            var rules = /\s.*/
            sender = msg.author.id

            if (rules.test(msg.content)) {
                result = msg.content.match(rules)
                serial_data = result[0].trim()
                parameters = serial_data.split('^');
                if (parameters.length < 2)
                {
                    msg.reply('格式錯誤，輸入格式應為 ">>save_sn 序號名稱^序號^使用期限"');
                }
                else {
                    serial.insert_serial(serial_data, sender).then((res, err) => {
                        if (res != false) {
                            msg.reply('序號儲存成功，感謝您的贈與！');
                        }
                        else {
                            msg.reply('序號儲存失敗！');
                        }
                    })
                }
            }
            else
            {
                msg.reply('格式錯誤，輸入格式應為 ">>save_sn 序號名稱^序號^使用期限"');
            }
            return
        }
        else if (msg.content.toLowerCase().startsWith(`${prefix}get_sn`)) {
            var rules = /\s.*/
            recipient = msg.author.id

            if (rules.test(msg.content)) {
                result = msg.content.match(rules)
                id = result[0].trim()
                serial.get_serial(id, recipient).then((res, err) => {
                    if (res != false) {
                        EmbedMessages.set_single_serial_msg(res).then((set_res, err) => {
                            msg.reply(set_res);
                        })
                    }
                    else {
                        msg.reply('序號取得失敗！請確認編號是否正確。');
                    }
                })
            }
            else
            {
                msg.reply('格式錯誤，輸入格式應為 ">>get_sn 編號"');
            }
            return
        }
        else if (msg.content.toLowerCase() === `${prefix}list_sn`) {
            serial.list_serial().then((res, err) => {
                if (res != false) {
                    serial_data = ""

                    max_len_id = 0
                    max_len_name = 0
                    max_len_serial_number = 0
                    max_len_due_date = 0

                    for (let row of res.rows) {
                        max_len_id = row.id.toString().length > max_len_id ? row.id.toString().length : max_len_id
                        max_len_name = row.name.length > max_len_name ? row.name.length : max_len_name
                        max_len_serial_number = row.serial_number.length > max_len_serial_number ? row.serial_number.length : max_len_serial_number
                        max_len_due_date = row.due_date.length > max_len_due_date ? row.due_date.length : max_len_due_date
                    }

                    for (let row of res.rows) {
                        // serial_data = row.id
                        if (serial_data) {
                            // serial_data += "\n" + row.id.toString().padStart(max_len_id, '\u3000') + "｜" + row.name.padStart(max_len_name, '\u3000') + "｜" + row.serial_number.padStart(max_len_serial_number, '\u3000') + "｜" + row.due_date.padStart(max_len_due_date, '\u3000')
                            // serial_data += "\n" + row.id.toString().padStart(max_len_id, '\xa0') + " | " + row.name.padStart(max_len_name, '\xa0')
                            serial_data += "\n" + row.id.toString() + " | " + row.name
                        }
                        else {
                            // serial_data = row.id.toString().padStart(max_len_id, '\u3000') + "｜" + row.name.padStart(max_len_name, '\u3000') + "｜" + row.serial_number.padStart(max_len_serial_number, '\u3000') + "｜" + row.due_date.padStart(max_len_due_date, '\u3000')
                            // serial_data = row.id.toString().padStart(max_len_id, '\xa0') + " | " + row.name.padStart(max_len_name, '\xa0')
                            serial_data = row.id.toString() + " | " + row.name
                        }
                        console.log(row.id, row.name, row.serial_number)
                    }

                    EmbedMessages.set_list_serial_msg(serial_data).then((res, err) => {
                        msg.reply(res);
                    })
                }
                else {
                    msg.reply("Sorry！目前沒有任何的序號可供領取！");
                }
            })

            return
        }
    }

    if (msg.content.toLowerCase().startsWith(`${prefix}alarm`)) {
        var parameters = msg.content.split(' ');
        if (parameters.length > 1) {
            var para_1 = parameters[1];
            if (para_1 == "on") {
                if (job) {
                    job.cancel()
                }
                google_auth.authorize('token').then((res) => {
                    if (res) {
                        ScanCalendar(5);
                        alarm_status = true;
                        msg.reply("Alarm start.");
                    }
                })
            }
            else if (para_1 == "off") {
                job.cancel();
                alarm_status = false;
                msg.reply("Alarm is stop.");
            }
            else if (para_1 == "status") {
                msg.reply("Alarm status: " + alarm_status);
            }
            else
            {
                msg.reply('Parameter error. Please use ">>help" for detail.');
            }
        }
        else
        {
            msg.reply('Parameter error. Please use ">>help" for detail.');
        }
    }
    else if (msg.content.toLowerCase() === `${prefix}clean`) {
        clean_all_message_in_channel();
    }
    else if (msg.content.toLowerCase() === `${prefix}event`) {
        GetEventMessage().then((res, err) => {
            if (res != "") {
                msg.reply(res);
            }
            else {
                msg.reply("There is no event in this hour.");
            }
        })
    }
    else if (msg.content.toLowerCase() === `${prefix}help`) {
        msg.reply(EmbedMessages.CommandsMsgEmbed);
    }
    else if (msg.content.toLowerCase() === `${prefix}info`) {
        msg.reply(EmbedMessages.BotInfoMsgEmbed);
    }
    else if (msg.content.toLowerCase() === `${prefix}manager`) {
        msg.reply(EmbedMessages.ManagersMsgEmbed);
    }
    else if (msg.content.toLowerCase().startsWith(`${prefix}target`))
    {
        var parameters = msg.content.split(' ');
        if (parameters.length > 1) {
            var para_1 = parameters[1];
            if (para_1 == "everyone") {
                to_everyone = true;
                to_here = false;
                to_notify_group_only = false;
                msg.reply("Set alarm target to: everyone");
            }
            else if (para_1 == "here") {
                to_everyone = false;
                to_here = true;
                to_notify_group_only = false;
                msg.reply("Set alarm target to: here");
            }
            else if (para_1 == "notify_group") {
                to_everyone = false;
                to_here = false;
                to_notify_group_only = true;
                msg.reply("Set alarm target to: notify group only");
            }
            else {
                to_everyone = false;
                to_here = false;
                msg.reply("Set alarm target to: None");
            }
        }
        else
        {
            to_everyone = false;
            to_here = false;
            msg.reply("Set alarm target to: None");
        }
    }
    else if (msg.content.toLowerCase().startsWith(`${prefix}save_sn`) || msg.content.toLowerCase().startsWith(`${prefix}get_sn`) || msg.content.toLowerCase() === `${prefix}list_sn`) {
        msg.reply("使用序號相關功能指令，請私訊機器人");
    }
    else if (msg.content.toLowerCase().startsWith(`${prefix}truncate`)) {
        var rules = /\s.*/

        if (rules.test(msg.content)) {
            result = msg.content.match(rules)
            table_name = result[0].trim()
            serial.truncate_table(table_name).then((res, err) => {
                if (res != false) {
                    msg.reply(`資料表 ${table_name} 清除成功！`);
                }
                else {
                    msg.reply(`資料表 ${table_name} 清除失敗！`);
                }
            })
        }
        else
        {
            msg.reply('格式錯誤，輸入格式應為 ">>truncate_table 資料表名稱"');
        }
    }
    else if (msg.content.toLowerCase().startsWith(`${prefix}ping`)) {
        latency_data = server_channel_data
        msg.reply("機器人確認中，請稍後...").then(sent => {
            GetLatencyData(latency_data).then((res, err) => {
                EmbedMessages.set_server_status_msg(res).then((res, err) => {
                    sent.delete({ reason: "Clean Message" })
                    msg.reply(res);
                })
            }).catch(error => { return; })
        });
    }
    else {
        if (msg.content.toLowerCase().startsWith(`${prefix}`)) {
            msg.reply('Command not found. Please use ">>help" for detail.');
        }
    }
});

async function clean_all_message_in_channel() {
    const all_message = [];
    let last_id;
    let msg_size = 100;
    while (msg_size >= 50) {
        const options = { limit: 50 };
        if (last_id) {
            options.before = last_id;
        }

        await channel.messages.fetch(options).then(messages => {
            msg_size = messages.size;
            if (messages.size > 0) {
                messages.forEach(msg => { all_message.push(msg) })
                last_id = messages.last().id;
            }
        });
    }

    console.log("Total message numbers: " + all_message.length);

    all_message.pop(); // Not delete the first message in channel
    all_message.forEach(msg => {
        console.log("Delete message: " + msg.content)
        msg.delete({ reason: "Clean Message" })
    })
}

function ping(ip, port){
    var latency = -999;
    return new Promise((resolve, reject) => {
        tcpp.ping({address: ip, port: port, timeout: 1000,  attempts: 3}, function(err, result) {
            latency = result.avg
            resolve(latency)
        })
    }).catch(error => { return latency; });
}

async function GetLatencyData(latency_data){
    for(k in latency_data) {
        for (var i = 0; i < latency_data[k].length; i++)
        {
            ip = latency_data[k][i]["IP"]
            port = latency_data[k][i]["Port"]
            console.log("Ping host: " + ip + ":" + port)
            await ping(ip, port).then((res, err) => {
                latency_data[k][i]["Latency"] = res.toFixed(2)
            }).catch(error => { return; })
        }
    }
    return latency_data
}